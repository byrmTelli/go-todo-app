basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Todo:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deleted_at:
        allOf:
        - $ref: '#/definitions/gorm.DeletedAt'
        description: Soft Delete Implementation
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deleted_at:
        allOf:
        - $ref: '#/definitions/gorm.DeletedAt'
        description: Soft Delete Implementation
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  request.CreateTodoRequestModel:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  request.LoginRequestModel:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  request.RegisterRequestModel:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.UpdateTodoRequestModel:
    properties:
      content:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
    type: object
  response.UserLoginDTO:
    properties:
      email:
        type: string
      id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: sample@mail.com
    name: Bayram TELLÄ°
    url: http://www.samplemail.com
  description: This is a simple todo app api that created by Bayram TELLI to practice
    golang.
  termsOfService: http://swagger.io/terms/
  title: Bayram Telli ToDo App
  version: 1.0.0
paths:
  /CreateNewTodo:
    post:
      consumes:
      - application/json
      description: Create a new todo item in the database
      parameters:
      - description: Create New Todo Request
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/request.CreateTodoRequestModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new todo
      tags:
      - todos
  /DeleteTodo/{id}:
    delete:
      description: Deletes a todo by its ID from the database
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete a todo by ID
      tags:
      - todos
  /GetAllTodosIncludeSoftDeleteds:
    get:
      consumes:
      - application/json
      description: Gets all records with soft deleted records.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all records include soft deleteds
      tags:
      - todos
  /GetTodo/{id}:
    get:
      consumes:
      - application/json
      description: Get todo by ID from related database
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get todo by ID
      tags:
      - todos
  /GetTodos:
    get:
      consumes:
      - application/json
      description: Get todos from related database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get todos
      tags:
      - todos
  /GetUser/{id}:
    get:
      consumes:
      - application/json
      description: Get user details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - users
  /GetUsers:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all users
      tags:
      - users
  /Register:
    post:
      consumes:
      - application/json
      description: Create a new user with the given details
      parameters:
      - description: Create User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /UpdateTodo/{id}:
    put:
      consumes:
      - application/json
      description: Updates a todo by its ID from the database
      parameters:
      - description: Update Todo Request
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTodoRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Todo not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update a todo by ID
      tags:
      - todos
  /login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password
      parameters:
      - description: Login Request
        in: body
        name: LoginRequestModel
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserLoginDTO'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User login
      tags:
      - auth
swagger: "2.0"
